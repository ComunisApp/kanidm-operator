name: Build, test, and deploy to Docker Hub

on:
  # Pushes and tags trigger the full workflow
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  # Pull requests only trigger the unit tests
  pull_request:
    branches:
      - 'master'
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install poetry
        run: |
          pip install poetry
      - name: Set poetry environment
        run: |
          poetry env use 3.11
      - name: Install the project dependencies
        run: poetry install --no-root
      - name: Spin up a k8s cluster
        uses: helm/kind-action@v1
      - name: Install an ingress controller, so we can test that functionality of the operator
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/component=controller -n ingress-nginx --timeout=90s
      - name: Get the ip of the ingress controller, so we can access the ingress
        run: |
            INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Ingress IP: $INGRESS_IP"
            echo "INGRESS_IP=$INGRESS_IP" >> "$GITHUB_ENV"
      - name: Install cert-manager, so we can issue a TLS certificate for kanidm
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.5/cert-manager.yaml
          kubectl wait --for=condition=Available deployment cert-manager-webhook -n cert-manager --timeout=90s
      - name: Install the self-signed cluster certificate issuer to fake a letsencrypt production setup
        run: |
          kubectl apply -f tests/cluster-issuer.yaml
      - name: Redirect the idm.example.com hostname to the ingress controller, so the operator can access it as normal without a real DNS entry
        run: |
          sudo echo "$INGRESS_IP idm.example.com" | sudo tee -a /etc/hosts
      - name: Run the automated tests
        run: poetry run pytest -v
          
  deploy:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }} # this will be toastedcrumpets/kanidm-operator
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'      
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name != 'pull_request' }} # Don't push images for pull requests
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}